apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

import groovyx.net.http.HTTPBuilder
import org.apache.http.entity.mime.MultipartEntityBuilder
import static groovyx.net.http.Method.*

android {
    signingConfigs {
        release {
            storeFile file('storePath')
            storePassword 'storePassword'
            keyAlias 'keyAlias'
            keyPassword 'keyPassword'
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    compileSdkVersion 29
    buildToolsVersion "29.0.0"
    defaultConfig {
        applicationId "com.techgrand.gradletask"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

task buildReleaseApk(dependsOn: 'assembleRelease') {
    doLast {
        println("---->>> Release Build Generated")

        def formattedDate = new Date().format('ddMMyy_HHmm')
        def oldApk = file("build/outputs/apk/release/app-release.apk")
        def newApk = file("app_${formattedDate}.apk")
        println(oldApk.renameTo(newApk))

        def defaultEmail = "<-- Default Email -->"

        def jobId = uploadBuild(newApk)
        if (jobId != null) {
            println("---->>> APK Uploaded : ${jobId}")

            sleep(5 * 1000)  //This is for delay so that link for the job gets created (In case of diawi)

            def buildLink = getBuildLink(jobId)

            if (buildLink != null) {
                println("---->>> Got Build Link : ${buildLink}")

                def emailIds = project.hasProperty('email') ? "$email" : defaultEmail

                def res = sendToEmails(emailIds, buildLink)
                if (res !=null) {
                    println("---->>> Success")
                } else {
                    println("---->>> Failed Emails")
                }
            } else {
                println("---->>> Failed getting link")
            }
        } else {
            println("---->>> Failed uploading apk")
        }
    }
}

def uploadBuild(def apkFile) {
    def http = new HTTPBuilder("https://upload.diawi.com/")
    http.request(POST) { req ->

        def multiPartBuilder = MultipartEntityBuilder.create()
        multiPartBuilder.addTextBody("token", "<--Diawi Token-->")
        multiPartBuilder.addBinaryBody("file", apkFile)

        req.setEntity(multiPartBuilder.build())

        response.success = { resp, reader ->
            if (resp.statusLine.statusCode == 200) {
                return reader.getString('job')
                // response handling
            } else {
                return null
            }
        }
        response.failure = { resp, reader ->
            println("---->>> Request failed : Status: ${resp.status} --- Msg: ${reader}")
            throw Exception("Upload Request Failed")
        }
    }
}

def getBuildLink(def jobId) {
    def http = new HTTPBuilder("https://upload.diawi.com/status?token=<--Diawi Token-->&job=${jobId}")
    http.request(GET) { req ->
        response.success = { resp, reader ->
            if (resp.statusLine.statusCode == 200) {
                return reader.getString('link')
                // response handling
            } else {
                return null
            }
        }
        response.failure = { resp, reader ->
            println("---->>> Request failed : Status: ${resp.status} --- Msg: ${reader}")
            throw Exception("Link Request Failed")
        }
    }
}

def sendToEmails(def emails, def buildLink) {
    def http = new HTTPBuilder("<--Mail Gun API Url-->")
    http.request(POST) { req ->

        def multiPartBuilder = MultipartEntityBuilder.create()
        multiPartBuilder.addTextBody("from", "<--From email-->")
        multiPartBuilder.addTextBody("to", emails)
        multiPartBuilder.addTextBody("subject", "attachment test")
        multiPartBuilder.addTextBody("html", "Hi,<br>Please find attached build.<br><br>Link :${buildLink}")

        req.setEntity(multiPartBuilder.build())

        response.success = { resp, reader ->
            if (resp.statusLine.statusCode == 200) {
                println(reader)
                return ""
                // response handling
            } else {
                return null
            }
        }
        response.failure = { resp, reader ->
            println("---->>> Request failed : Status: ${resp.status} --- Msg: ${reader}")
            throw Exception("Upload Request Failed")
        }
    }
}
